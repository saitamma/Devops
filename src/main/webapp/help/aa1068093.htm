<!DOCTYPE html PUBLIC 
"-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- generated by DCL filter dwhtm, Ver 4.1 m210 h293 -->
<head><link rel="stylesheet" href="local.css" type="text/css">
<title>Configuring Ethernet Adapter Policy</title>
<meta http-equiv="Content-type" content="text/html; charset=UTF-8">
<link rel="StyleSheet" href="document.css" type="text/css" />
<link rel="StyleSheet" href="catalog.css" type="text/css" />
<script>
var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
if(is_chrome){document.domain=document.domain}
</script>
<script type="text/javascript" language="JavaScript1.2" src="expand.js"></script>
<script type="text/javascript" language="JavaScript1.2" src="page.js"></script>
<script type="text/javascript" language="JavaScript1.2">
function  WWNoOp() {}
function  WWNoValue() { return ; }
var  VarDropDown;
if (typeof(HTMLHelp_Object) != "undefined")
{
 VarDropDown = new WWDropDown_Object();
}
else{ VarDropDown = new Object();
VarDropDown.fAnchorOpen  = WWNoOp;
VarDropDown.fAnchorClose = WWNoOp;
VarDropDown.fDIVOpen  = WWNoOp;
VarDropDown.fDIVClose = WWNoOp;
} </script>


<SCRIPT language="javascript">
<!--
  self.document.write("<link href='style.css' rel='stylesheet' type='text/css'>");
  myid=50;
  self.document.write("<script type='text/javascript' language='JavaScript' src='con_utils.js'></scr"+"ipt>");
//-->
</SCRIPT>
</head>
<body onload="highlightSearchTerms();"><h1 class="x1HHead1"><a
 name="Xaa1068093"></a><b>Configuring Ethernet Adapter Policy</b></h1>
<p class="B1Body1"><a
 name="Xaa1068094"></a>These policies govern the host-side behavior of
the adapter, including how the adapter handles traffic. This also allows
you to create the LAN Adapter Policy.</p>
<p class="B1Body1"><a
 name="Xaa1068095"></a>To configure Ethernet Adapter policy, perform the
following:</p>
<p class="SFStepFirst"><a
 name="Xaa1066454"></a><span class="zUnivBold"><b> 1.</b><b> </b></span>Select
the <b>Organization</b> from the drop-down. By default, <b>root</b> is
selected.</p>
<p class="SNStepNext"><a
 name="Xaa1066818"></a><span class="zUnivBold"><b> 2.</b><b> </b></span>Enter
the <b>Name</b> of the policy.</p>
<p class="SNStepNext"><a
 name="Xaa1066823"></a><span class="zUnivBold"><b> 3.</b><b> </b></span>Click
<b>Add </b>to generate the policy</p>
<p class="FCFigureCap"><a
 name="Xaa1066645"></a><b><i></i></b><b><i>Figure 5-6</i></b><b><i> Ethernet
Adapter Policy</i></b></p>
<p class="graphic"><img src="images/ETHAdapterpolicy.jpg" width="574px"
height="268px" alt=""></p><p class="SNStepNext"><a
 name="Xaa1066646"></a><span class="zUnivBold"><b> 4.</b><b> </b></span>Click
<b>Config</b>, enter the required fields and click <b>Save</b></p>
<p class="FCFigureCap"><a
 name="XPGaa6"></a><a
 name="Xaa1066734"></a><b><i></i></b><b><i>Figure 5-7</i></b><b><i> ETH
Adapter Policy</i></b></p>
<p class="graphic"><img src="images/ETHconfig.jpg" width="511px"
height="287px" alt=""></p><p class="TCTableCap"><a
 name="Xaa1068446"></a><b><i></i></b><b><i>Table 5-1</i></b><b><i> ETH
Adapter Parameters</i></b></p>

<table class="A" border="3" cellpadding="6" cellspacing="2">
<thead>
<tr>
<td align="left" valign="bottom"><p class="CH1CellHead1"><a
 name="Xaa1068556"></a><b>Item</b></p>
</td>
<td align="left" valign="bottom"><p class="CH1CellHead1"><a
 name="Xaa1068558"></a><b>Description</b></p>
</td>
</tr>
</thead>

<tbody>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068560"></a>Transmit Queues</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068669"></a>The number of transmit queue resources to allocate.</p>
<p class="B1Body1"><a
 name="Xaa1068562"></a>Enter an integer between 1 and 256. </p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068564"></a>Receive Queues</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068964"></a>The number of receive queue resources to allocate.</p>
<p class="B1Body1"><a
 name="Xaa1068696"></a>Enter an integer between 1 and 256.</p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068568"></a>Completion Queues</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1069052"></a>The number of completion queue resources to allocate.
In general, the number of completion queue resources you should allocate
is equal to the number of transmit queue resources plus the number of
receive queue resources.</p>
<p class="B1Body1"><a
 name="Xaa1068570"></a>Enter an integer between 1 and 512. </p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068572"></a>Transmit Ring Size</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1069022"></a>The number of descriptors in each transmit queue.</p>
<p class="B1Body1"><a
 name="Xaa1069023"></a>Enter an integer between 64 and 4096. </p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068576"></a>Receiving Ring Size</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1069138"></a>The number of descriptors in each receive queue.</p>
<p class="B1Body1"><a
 name="Xaa1068578"></a>Enter an integer between 64 and 4096</p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068580"></a>Completion Queues Interrupts</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1069169"></a>The number of interrupt resources to allocate. In
general, this value should be equal to the number of completion queue
resources.</p>
<p class="B1Body1"><a
 name="Xaa1068582"></a>Enter an integer between 1 and 514. </p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068584"></a>Transmit Checksum Offload</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1069279"></a>This can be one of the following:</p>
<p class="Bu1Bullet1"><a
 name="Xaa1069281"></a><span class="zUnivBold"><b> •</b><b> </b></span>Disabled:
The CPU calculates all packet checksums.</p>
<p class="Bu1Bullet1"><a
 name="Xaa1069283"></a><span class="zUnivBold"><b> •</b><b> </b></span>Enabled:
The CPU sends all packets to the hardware so that the checksum can be
calculated. This option may reduce CPU overhead.</p>
<p class="N2Note2"><a
 name="Xaa1069354"></a><span class="zUnivBold"><b>Note</b><b> </b></span>This
option affects only packets sent from the interface.</p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068588"></a>Receive Checksum Offload</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1069392"></a> This can be one of the following:</p>
<p class="Bu1Bullet1"><a
 name="Xaa1069394"></a><span class="zUnivBold"><b> •</b><b> </b></span>Disabled:
The CPU validates all packet checksums.</p>
<p class="Bu1Bullet1"><a
 name="Xaa1069396"></a><span class="zUnivBold"><b> •</b><b> </b></span>Enabled:
The CPU sends all packet checksums to the hardware for validation. This
option may reduce CPU overhead.</p>
<p class="N2Note2"><a
 name="Xaa1068590"></a><span class="zUnivBold"><b>Note</b><b> </b></span>This
option affects only packets received by the interface. </p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068592"></a>TCP Segmentation Offload</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1069644"></a> This can be one of the following:</p>
<p class="Bu1Bullet1"><a
 name="Xaa1069646"></a><span class="zUnivBold"><b> •</b><b> </b></span>Disabled:
The CPU segments large TCP packets.</p>
<p class="Bu1Bullet1"><a
 name="Xaa1069648"></a><span class="zUnivBold"><b> •</b><b> </b></span>Enabled:
The CPU sends large TCP packets to the hardware to be segmented. This
option may reduce CPU overhead and increase throughput rate.</p>
<p class="N2Note2"><a
 name="Xaa1068594"></a><span class="zUnivBold"><b>Note</b><b> </b></span>This
option is also known as Large Send Offload (LSO) and affects only packets
sent from the interface. </p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068596"></a>TCP Large Receive Offload</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1069808"></a>This can be one of the following:</p>
<p class="Bu1Bullet1"><a
 name="Xaa1069812"></a><span class="zUnivBold"><b> •</b><b> </b></span>Disabled:
The CPU processes all large packets.</p>
<p class="Bu1Bullet1"><a
 name="Xaa1069814"></a><span class="zUnivBold"><b> •</b><b> </b></span>Enabled:
The hardware reassembles all segmented packets before sending them to
the CPU. This option may reduce CPU utilization and increase inbound
throughput.</p>
<p class="N2Note2"><a
 name="Xaa1068598"></a><span class="zUnivBold"><b>Note</b><b> </b></span>This
option affects only packets received by the interface. </p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068600"></a>Receive Side Scaling</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1069996"></a> RSS distributes network receive processing across
multiple CPUs in multiprocessor systems. This can be one of the following:</p>
<p class="Bu1Bullet1"><a
 name="Xaa1069998"></a><span class="zUnivBold"><b> •</b><b> </b></span>Disabled:
Network receive processing is always handled by a single processor even
if additional processors are available.</p>
<p class="Bu1Bullet1"><a
 name="Xaa1070000"></a><span class="zUnivBold"><b> •</b><b> </b></span>Enabled:
Network receive processing is shared across processors whenever possible.</p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068604"></a>Accelerated Receive Flow Steering</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1070087"></a>Packet processing for a flow must be performed on
the local CPU. This is supported for Linux operating systems only. This
can be one of the following:</p>
<p class="Bu1Bullet1"><a
 name="Xaa1070089"></a><span class="zUnivBold"><b> •</b><b> </b></span>Disabled:
The CPU is not specified.</p>
<p class="Bu1Bullet1"><a
 name="Xaa1070091"></a><span class="zUnivBold"><b> •</b><b> </b></span>Enabled:
Packet processing is performed on the local CPU.</p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068608"></a>Failback Timeout (Seconds)</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1070141"></a>After a vNIC has started using its secondary interface,
this setting controls how long the primary interface must be available
before the system resumes using the primary interface for the vNIC.</p>
<p class="B1Body1"><a
 name="Xaa1068610"></a>Enter a number of seconds between 0 and 600. </p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068612"></a>Interrupt Mode</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1070166"></a> The preferred driver interrupt mode. This can be
one of the following:</p>
<p class="Bu1Bullet1"><a
 name="Xaa1070168"></a><span class="zUnivBold"><b> •</b><b> </b></span>MSI
X: Message Signaled Interrupts (MSI) with the optional extension. This
is the recommended option.</p>
<p class="Bu1Bullet1"><a
 name="Xaa1070170"></a><span class="zUnivBold"><b> •</b><b> </b></span>MSI:
MSI only.</p>
<p class="Bu1Bullet1"><a
 name="Xaa1070172"></a><span class="zUnivBold"><b> •</b><b> </b></span>INTx:
PCI INTx interrupts.</p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068616"></a>Interrupt Coalescing Type</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1070290"></a> This can be one of the following:</p>
<p class="B1Body1"><a
 name="Xaa1070292"></a>Min: The system waits for the time specified in
the Interrupt Timer field before sending another interrupt event.</p>
<p class="B1Body1"><a
 name="Xaa1070294"></a>Idle: The system does not send an interrupt until
there is a period of no activity lasting as least as long as the time
specified in the Interrupt Timer field.</p>
</td>
</tr>
<tr>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1068620"></a>Interrupt Timer(s)</p>
</td>
<td valign="top"><p class="B1Body1"><a
 name="Xaa1070382"></a>The time to wait between interrupts or the idle
period that must be encountered before an interrupt is sent.</p>
<p class="B1Body1"><a
 name="Xaa1068622"></a>Enter a value between 1 and 65535. To turn off interrupt
coalescing, enter 0 (zero) in this field. </p>
</td>
</tr>
</tbody>

</table>

<p class="SNStepNext"><a
 name="XPGaa8"></a><a
 name="Xaa1066858"></a><span class="zUnivBold"><b> 5.</b><b> </b></span>Click
<span class="BBold"><b>Save and Next</b></span> to proceed further.</p>


</body><!-- Split file for ID 1066647 here -->
</html>
